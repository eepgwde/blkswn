## @file _IceFireA.py
# @brief Analyzer for text files from IceFireR.py
# @author weaves
#
#

import logging
import configparser
import socks
import socket
from urllib import request

from functools import partial
from itertools import *

from blkswn import Configuration
from blkswn import IceFire

import ast


class IceFireA(object):
  """
  Analyzer for text files.

  This is a test interface. It could just take a list iterator. Like from IceFireR.

  The text files are generated by IceFireR.py see test_Test2.py
  """

  _type0 = None                 # books or characters or houses
  _src = None                   # the iterator

  @classmethod
  def make0(cls, **kwargs):
    ts = IceFire.types0
    ts = ", ".join(ts)

    cls.srcs = ( ( "{x}".format(x=x), "{x}.txt".format(x=x) ) for x in IceFire.types0 )

    cls.srcs = list(cls.srcs)  

    fctr = lambda x: IceFireA(type0=x[0], file=x[1])
    cls.srcs0 = ( fctr(x) for x in cls.srcs )
    v0 = list((x._type0, x) for x in cls.srcs0)
    return dict(v0)


  def __init__(self, **kwargs):
    """
    Set the type0 if given as a keyword. Take the filename and form an iterator.

    """
    if 'type0' in kwargs:
      v0 = kwargs['type0']
      if not v0 in IceFire.types0:
        t0 = ','.join(IceFire.types0)
        s0 = '"{v0}" not a known type "{t0}"'.format(t0=t0, v0=v0)
        raise ValueError(s0)

      self._type0 = v0

    if 'file' in kwargs:
      with open(kwargs['file'], 'r') as f0:
        v0 = f0.read()
        v0 = ast.literal_eval(v0)
        self._src = iter(v0)

    if self._src is None:
      raise ValueError("no data source given")

    def __str__(self):
      return str(self._type0)

  def filter(self, **kwargs):
    pass

  @classmethod
  def first_true(cls, iterable, default=False, pred=None):
    """Returns the first true value in the iterable.

    If no true value is found, returns *default*

    If *pred* is not None, returns the first item
    for which pred(item) is true.

    """
    # first_true([a,b,c], x) --> a or b or c or x
    # first_true([a,b], x, f) --> a if f(a) else b if f(b) else x
    return next(filter(pred, iterable), default)

  @classmethod
  def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))

